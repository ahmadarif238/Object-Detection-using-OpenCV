{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a38b1129-dc4e-4acc-9dea-5dc8804a16a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st  \n",
    "import cv2  \n",
    "import numpy as np  \n",
    "import os  \n",
    "\n",
    "# Load the model  \n",
    "frozen_model = \"CV/frozen_inference_graph.pb\"  \n",
    "config_file = \"CV/ssd_mobilenet_v3_large_coco_2020_01_14.pbtxt\"  \n",
    "model = cv2.dnn_DetectionModel(frozen_model, config_file)  \n",
    "model.setInputSize(320, 320)  \n",
    "model.setInputScale(1.0 / 127.5)  \n",
    "model.setInputMean((127.5, 127.5, 127.5))  \n",
    "model.setInputSwapRB(True)  \n",
    "\n",
    "# Load class labels from COCO dataset  \n",
    "classLabels = [  \n",
    "    'person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train',  \n",
    "    'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter',  \n",
    "    'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear',  \n",
    "    'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase',  \n",
    "    'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat',  \n",
    "    'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle',  \n",
    "    'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple',  \n",
    "    'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut',  \n",
    "    'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet',  \n",
    "    'TV', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave',  \n",
    "    'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase',  \n",
    "    'scissors', 'teddy bear', 'hair drier', 'toothbrush'  \n",
    "]  \n",
    "\n",
    "st.title(\"Object Detection with OpenCV\")  \n",
    "\n",
    "uploaded_file = st.file_uploader(\"Upload Video\", type=[\"mp4\", \"avi\"])  \n",
    "\n",
    "if uploaded_file is not None:  \n",
    "    # Save the uploaded video to a temporary file  \n",
    "    temp_video_path = \"temp_video.mp4\"  \n",
    "    with open(temp_video_path, \"wb\") as f:  \n",
    "        f.write(uploaded_file.read())  \n",
    "\n",
    "    # Open the video file  \n",
    "    cap = cv2.VideoCapture(temp_video_path)  \n",
    "\n",
    "    if not cap.isOpened():  \n",
    "        st.error(\"Error opening video file.\")  \n",
    "        os.remove(temp_video_path)  \n",
    "        st.stop()  # Exit current script if video cannot be opened  \n",
    "\n",
    "    stframe = st.empty()  # Create an empty placeholder for video frames  \n",
    "\n",
    "    while cap.isOpened():  \n",
    "        ret, frame = cap.read()  \n",
    "        if not ret:  \n",
    "            break  \n",
    "\n",
    "        # Perform detection  \n",
    "        ClassIndex, confidence, bbox = model.detect(frame, confThreshold=0.55)  \n",
    "\n",
    "        for ClassInd, conf, boxes in zip(ClassIndex.flatten(), confidence.flatten(), bbox):  \n",
    "            if ClassInd <= len(classLabels):  # Ensure index is within bounds  \n",
    "                label = classLabels[ClassInd - 1]  # Adjusting index for zero-based access  \n",
    "                cv2.rectangle(frame, boxes, (255, 0, 0), 2)  \n",
    "                cv2.putText(frame, f\"{label} {conf:.2f}\",   \n",
    "                            (boxes[0] + 10, boxes[1] + 40),   \n",
    "                            cv2.FONT_HERSHEY_PLAIN, 3, (0, 255, 0), 3)  \n",
    "\n",
    "        # Convert frame to RGB for Streamlit display  \n",
    "        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)  \n",
    "        stframe.image(frame_rgb, channels=\"RGB\", use_column_width=True)  \n",
    "\n",
    "    cap.release()  \n",
    "    os.remove(temp_video_path)  # Cleanup temporary file  \n",
    "    st.write(\"Video processing completed.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "fa272e75-b75a-4db8-a48b-aa81b8f31f61",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
